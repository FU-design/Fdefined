/**
 *@description 时间复杂度练习题
 */

sum = 0; // 1 次
for (i = 1; i <= n; i++) {
  // n次
  for (j = 1; j <= n; j++) {
    // n次
    sum++; // n * n 次
  }
}

/**
 *  T(n) = 1 + n + n + n^2 = n^2 + 2n + 1
 *  以时间复杂度为例，由于 时间复杂度 描述的是算法执行时间与数据规模的 增长变化趋势，
 *  所以 常量、低阶、系数 实际上对这种增长趋势不产生决定性影响，
 *  所以在做时间复杂度分析时 忽略 这些项。
 *  故该程序的时间复杂度为：T(n) = O(n^2)
 */

//# <--------------------------------------------------------------------------------------------------------->

for (i = 1; i < n; i++) {
  // n 次 （1...n）
  y = y + 1; // n - 1 次
  for (j = 0; j <= 2 * n; j++) {
    // n -1 * 2n + 1 次
    x++; // n -1 * 2n + 1 次
  }
}

/**
 * ? n + (n - 1) + ((n-1) * (2n+1)) * 2
 * = n + n - 1 + 4n^2 + 2n - 4n - 2
 * = 4n^2 - 3
 * 故：T(n) = O(n^2)
 */

// # <-------------------------------------------------------------------------------------------------------->

a = 0; // 1
b = 1; // 1
for (i = 1; i <= n; i++) {
  // n
  s = a + b; // n
  b = a; // n
  a = s; // n
}

/**
 * ? T(n) = O(n)
 */
// # <-------------------------------------------------------------------------------------------------------->

for (i = 1; i <= n; i += 2) {
  // ...
}
/**
 * ? 假设 n = 8, 2  4  6  8  => 4 次
 * ? 2^x = n
 * ? x = log2(n)
 * 故: T(n) = O(log2(n)) //! error 结果为 T(n) = O(n)
 */

// # <-------------------------------------------------------------------------------------------------------->
i = 1;
while (i <= n) {
  i = i * 2;
}
/**
 * ? 假设 n = 16， 1 2 4 8 16
 *
 *
 */
